<?php
namespace app\home\controller\user;

use app\BaseController;

use app\common\model\UserAddress;
use app\common\traites\PublicCrudTrait;

use think\exception\ValidateException;
use think\facade\Db;
use hg\apidoc\annotation as Apidoc;

/**
 *
 * @Apidoc\Title("用户地址管理")
 * */
class Address extends BaseController
{
    use PublicCrudTrait;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @Apidoc\Title("地址列表")
     * @Apidoc\Method("POST")
     * @Apidoc\Returned("data", type="array", desc="返回地址列表")
     */
    public function my_address() {
        $uid = session('home_user.id');
        $res = UserAddress::selectByUserid($uid);
        return show($res);
    }

    /**
     * @Apidoc\Title("设为默认地址")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("id", type="int", require=true, desc="ID序号")
     * @Apidoc\Returned("data", type="array", desc="返回成功失败结果")
     */
    public function set_default_address() {
        //过滤数据
        $postField = 'id';
        $params = $this->request->only(explode(',', $postField), 'post', null);

        $uid = session('home_user.id');
        $res = UserAddress::findByIdAndUserid($params['id'], $uid);
        if (!$res) {
            return show([], config('ToConfig.http_code.error'), '该地址不存在，请重试！');
        }

        if ($res->save(['is_default' => 1])) {
            UserAddress::cancelDefault($params['id'], $uid);
            return show([], config('ToConfig.http_code.success'), '设置成功');
        }

        return show([], config('ToConfig.http_code.error'), '设置失败');
    }

    /**
     * @Apidoc\Title("添加地址")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("username", type="varchar",require=true, desc="姓名")
     * @Apidoc\Param("phone_number", type="varchar",require=true, desc="手机号")
     * @Apidoc\Param("address", type="varchar",require=true, desc="地址")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function add_address() {
        //过滤数据
        $postField = 'username,phone_number,address';
        $params = $this->request->only(explode(',', $postField), 'post', null);

        try {
            $this->validate($params,
                [
                    'username' => 'require|max:25',
                    'phone_number' => 'require|mobile',
                    'address' => 'require|max:250',
                ],
                [
                    'username.require' => '名称必填',
                    'username.max' => '名称最多不能超过25个字符',
                    'phone_number.require' => '手机号必填',
                    'phone_number.mobile' => '手机号格式错误',
                    'address.require' => '地址必填',
                    'address.max' => '地址最多不能超过250个字符',
                ]
            );
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }

        $params['uid'] = session('home_user.id');
        UserAddress::create($params);

        return show([], config('ToConfig.http_code.success'), '地址添加成功');
    }

    /**
     * @Apidoc\Title("编辑地址")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("id", type="int",require=true, desc="ID序号")
     * @Apidoc\Param("username", type="varchar",require=true, desc="姓名")
     * @Apidoc\Param("phone_number", type="varchar",require=true, desc="手机号")
     * @Apidoc\Param("address", type="varchar",require=true, desc="地址")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function edit_address() {
        //过滤数据
        $postField = 'id,username,phone_number,address';
        $params = $this->request->only(explode(',', $postField), 'post', null);

        try {
            $this->validate($params,
                [
                    'id' => 'require|number',
                    'username' => 'require|max:25',
                    'phone_number' => 'require|mobile',
                    'address' => 'require|max:250',
                ],
                [
                    'id' => 'ID必须',
                    'username.require' => '名称必填',
                    'username.max' => '名称最多不能超过25个字符',
                    'phone_number.require' => '手机号必填',
                    'phone_number.mobile' => '手机号格式错误',
                    'address.require' => '地址必填',
                    'address.max' => '地址最多不能超过250个字符',
                ]
            );
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }

        $uid = session('home_user.id');
        $res = UserAddress::findByIdAndUserid($params['id'], $uid);
        if (!$res) {
            return show([], config('ToConfig.http_code.error'), '该地址不存在，请重试！');
        }

        if ($res->save($params)) {
            return show([], config('ToConfig.http_code.success'), '地址修改成功');
        }

        return show([], config('ToConfig.http_code.error'), '地址修改失败');
    }

    /**
     * @Apidoc\Title("删除地址")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("id", type="int",require=true, desc="ID序号")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function del_address() {
        //过滤数据
        $postField = 'id';
        $params = $this->request->only(explode(',', $postField), 'post', null);

        $uid = session('home_user.id');
        $res = UserAddress::findByIdAndUserid($params['id'], $uid);
        if (!$res) {
            return show([], config('ToConfig.http_code.error'), '该地址不存在或已删除，请重试！');
        }

        if ($res->delete()) {
            return show([], config('ToConfig.http_code.success'), '地址删除成功');
        }

        return show([], config('ToConfig.http_code.error'), '该地址不存在或已删除，请重试！');
    }
// 类结束了
}
