<?php


namespace app\admin\controller\content;

use app\admin\controller\Base;

use app\common\model\Article as models;
use app\common\traites\PublicCrudTrait;
use think\exception\ValidateException;
use \app\validate\Article as validates;

class Article extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 文章控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = [];
        isset($post['title']) && $map [] = ['title', 'like', '%' . $post['title'] . '%'];

        $list = $this->model->page_list($map, $limit, $page)->each(function($item, $key){
            $item['content'] = htmlspecialchars_decode(strip_tags($item['content']));
            return $item;
        });;
        return $this->success($list);
    }

    /**
     * 添加
     */
    public function add()
    {
        //过滤数据
        $postField = 'type,content,thumb_url,title,author,description';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        if (!empty($post['content'])) $post['content'] = saveEditor($post['content']);

        $user = $this->model->where('title', $post['title'])->find();
        if ($user) return $this->failed('该标题以存在');
        //处理图片
       isset($post['thumb_url']) && $post['thumb_url']= image_update($post['thumb_url']);

        $save = $this->model->save($post);
        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    /**
     * 查询
     * @return mixed
     */
    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        // //验证数据
        // try {
        //     validate(validates::class)->scene('detail')->check($post);
        // } catch (ValidateException $e) {
        //     // 验证失败 输出错误信息
        //     return $this->failed($e->getError());
        // }
        //查询
        $user = $this->model->find($post['id']);
        $user['content'] = htmlspecialchars_decode($user['content']);   
        if ($user) return $this->success($user);
        return $this->failed('文章不存在');
    }

    /**
     * 修改
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,type,content,thumb_url,title,author,description';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        // try {
        //     validate(validates::class)->scene('edit')->check($post);
        // } catch (ValidateException $e) {
        //     // 验证失败 输出错误信息
        //     return $this->failed($e->getError());
        // }

        //查询是否重复的该菜单
        // $find = $this->model->where('title', $post['title'])->where('id', '<>', $post['id'])->find();
        // if ($find) return $this->failed('该标题以存在');
        // if (isset($post['thumb_url'])){
        //     $post['thumb_url']= image_update($post['thumb_url']);
        // }
        // if (!empty($post['content'])) $post['content'] = saveEditor($post['content']);
        if (!empty($post['thumb_url'])) $post['thumb_url'] = str_replace(config('ToConfig.app_update.image_url'),'',$post['thumb_url'][0]['url']) ;
        //执行修改数据
        $save = $this->model->update($post);
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }
}